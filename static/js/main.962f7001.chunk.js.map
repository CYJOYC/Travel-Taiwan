{"version":3,"sources":["CityContext.js","components/Header/index.js","components/ScenicSpot/index.js","App.js","index.js"],"names":["CityContext","createContext","Header","useContext","cityChosen","setCityChosen","location","useLocation","useEffect","currentCity","pathname","replace","className","id","name","map","city","to","onClick","ScenicSpot","useState","page","setPage","scenicSpots","setScenicSpots","cityChange","setCityChange","loading","setloading","hasNextPage","setHasNextPage","fetchData","fetch","then","res","json","data","length","catch","console","error","infiniteRef","useInfiniteScroll","onLoadMore","newPage","String","parseInt","scrollContainer","ref","scenicSpot","Name","undefined","Description","ID","App","Provider","value","ReactDOM","render","StrictMode","exact","path","document","getElementById"],"mappings":"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","file":"static/js/main.962f7001.chunk.js","sourcesContent":["import { createContext } from \"react\";\n\nconst CityContext = createContext([\"all\", () => {}]);\n\nexport default CityContext;\n","import { BrowserRouter as Router, Link } from \"react-router-dom\";\nimport { useContext, useEffect } from \"react\";\nimport CityContext from \"../../CityContext\";\nimport { useLocation } from \"react-router-dom\";\n\nfunction Header() {\n  const [cityChosen, setCityChosen] = useContext(CityContext);\n  const location = useLocation();\n\n  useEffect(() => {\n    let re = \"/scenicSpot\";\n    let currentCity = location.pathname.replace(re, \"\");\n    setCityChosen(currentCity);\n  }, [location, setCityChosen]);\n\n  const cities = [\n    { id: \"\", name: \"所有縣市\" },\n    { id: \"/Taipei\", name: \"台北市\" },\n    { id: \"/NewTaipei\", name: \"新北市\" },\n    { id: \"/Taoyuan\", name: \"桃園市\" },\n    { id: \"/Taichung\", name: \"台中市\" },\n    { id: \"/Tainan\", name: \"台南市\" },\n    { id: \"/Kaohsiung\", name: \"高雄市\" },\n    { id: \"/Keelung\", name: \"基隆市\" },\n    { id: \"/Hsinchu\", name: \"新竹市\" },\n    { id: \"/HsinchuCounty\", name: \"新竹縣\" },\n    { id: \"/MiaoliCounty\", name: \"苗栗縣\" },\n    { id: \"/ChanghuaCounty\", name: \"彰化縣\" },\n    { id: \"/NantouCounty\", name: \"南投縣\" },\n    { id: \"/YunlinCounty\", name: \"雲林縣\" },\n    { id: \"/ChiayiCounty\", name: \"嘉義縣\" },\n    { id: \"/Chiayi\", name: \"嘉義市\" },\n    { id: \"/PingtungCounty\", name: \"屏東縣\" },\n    { id: \"/YilanCounty\", name: \"宜蘭縣\" },\n    { id: \"/HualienCounty\", name: \"花蓮縣\" },\n    { id: \"/TaitungCounty\", name: \"台東縣\" },\n    { id: \"/KinmenCounty\", name: \"金門縣\" },\n    { id: \"/PenghuCounty\", name: \"澎湖縣\" },\n    { id: \"/LienchiangCounty\", name: \"連江縣\" },\n  ];\n\n  return (\n    <Router>\n      <div className=\"city-nav\">\n        {cities.map((city) => (\n          <Link\n            className={\n              cityChosen === city.id ? \"item-active city-item\" : \"city-item\"\n            }\n            to={\"/scenicSpot\" + city.id}\n            key={city.id}\n            onClick={() => {\n              setCityChosen(city.id);\n            }}\n          >\n            {city.name}\n          </Link>\n        ))}\n      </div>\n    </Router>\n  );\n}\n\nexport default Header;\n","import CityContext from \"../../CityContext\";\nimport { useContext, useState, useEffect } from \"react\";\nimport useInfiniteScroll from \"react-infinite-scroll-hook\";\n\nconst ScenicSpot = () => {\n  const [city] = useContext(CityContext);\n  const [page, setPage] = useState(\"0\");\n  const [scenicSpots, setScenicSpots] = useState([]);\n  const [cityChange, setCityChange] = useState(false);\n  const [loading, setloading] = useState(false);\n  const [hasNextPage, setHasNextPage] = useState(true);\n\n  const fetchData = (page) => {\n    if (hasNextPage) {\n      let scenicSpotUrl =\n        \"https://ptx.transportdata.tw/MOTC/v2/Tourism/ScenicSpot\" +\n        city +\n        \"?$top=30&$skip=\" +\n        page +\n        \"&$format=JSON\";\n\n      fetch(scenicSpotUrl)\n        .then((res) => res.json())\n        .then((data) => {\n          setScenicSpots([...scenicSpots, ...data]);\n          setloading(false);\n          if (data.length < 30) {\n            setHasNextPage(false);\n          }\n        })\n        .catch(console.error);\n    }\n  };\n\n  useEffect(() => {\n    if (cityChange === true) {\n      fetchData(page);\n      setCityChange(false);\n    }\n  }, [cityChange]);\n\n  useEffect(() => {\n    setScenicSpots([]);\n    setPage(\"0\");\n    setHasNextPage(true);\n    setCityChange(true);\n  }, [city]);\n\n  const handleLoadMore = () => {\n    if (hasNextPage) {\n      setloading(true);\n      let newPage = String(parseInt(page) + 30);\n      setPage(newPage);\n      fetchData(newPage);\n    }\n  };\n\n  const infiniteRef = useInfiniteScroll({\n    loading,\n    hasNextPage: hasNextPage,\n    onLoadMore: handleLoadMore,\n    scrollContainer: \"window\",\n  });\n\n  return (\n    <div className=\"spots-list-background\" ref={infiniteRef}>\n      {scenicSpots.length === 0 ? (\n        <div className=\"loading\">景點下載中</div>\n      ) : (\n        <div id=\"spots-list\">\n          {scenicSpots.map((scenicSpot) => {\n            return (\n              <div className=\"spot-item\" key={scenicSpot.ID}>\n                <div className=\"spot-item-name\">{scenicSpot.Name}</div>\n                <div className=\"spot-item-description\">\n                  {scenicSpot.Description === undefined\n                    ? \"暫無景點介紹\"\n                    : scenicSpot.Description}\n                </div>\n              </div>\n            );\n          })}\n        </div>\n      )}\n      <div className=\"load-more\">{loading ? \"下載更多景點中...\" : \"\"}</div>\n      <div className=\"no-more\">{hasNextPage ? \"\" : \"已無其他景點\"}</div>\n    </div>\n  );\n};\n\nexport default ScenicSpot;\n","import React, { useState, useEffect } from \"react\";\nimport CityContext from \"./CityContext\";\nimport Header from \"./components/Header\";\nimport ScenicSpot from \"./components/ScenicSpot\";\n\nfunction App() {\n  const city = useState(\"\");\n\n  return (\n    <CityContext.Provider value={city}>\n      <Header />\n      <ScenicSpot />\n    </CityContext.Provider>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { BrowserRouter, Route, Redirect } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <Route exact path=\"/\">\n        <Redirect to=\"/scenicSpot\" />\n      </Route>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}